{
  "info": {
    "_postman_id": "b63e94e9-c40f-4187-b8f3-429bd700f1d2",
    "name": "Users API",
    "description": "This collection is designed to show how you might mock, test document a new API. In this case, we're assuming that we're going to create a basic user management API.\n\nIt has basic CRUD operations listed below.\n\nHit the \"Run in Postman\" button to see the pre-request and test scripts powering this collection.\n\nTry running the collection through the Collection Runner to see how the mock allows us to scope out all our responses and write our tests in advance.\n\n## Summary\n\nHaving undergone the effort of building out our collection in Postman first:\n\n- Using Postman Mocks\n- Writing tests\n \nThis has allowed us to then build out our API to match, meaning we could:\n(Update the `url` in the environment to `http://localhost:3000` and run the following Node API: https://github.com/matt-ball/users-api)\n\n- Debug our API as it was being built\n- Ensure parity with our mocks, meeting the designed blueprint\n- Run tests against the API as it was being built so that it's watertight\n\nAs a result:\n\n- We now have a shareable collection for our API\n- We have beautiful, rich documentation showing how it works\n- We can run our collection in a fully automated fashion and attach it to our CI/CD pipeline\n- We can create a Postman Monitor with no added effort to check for responsiveness and correctness",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
  },
  "item": [
    {
      "name": "Create",
      "item": [
        {
          "name": "New user",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "447d1cbb-5950-46e1-9f1f-d3d4e7ed6966",
                "exec": [
                  "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){",
                  "\"use strict\"",
                  "",
                  "function unique_pred(list, compare) {",
                  "  var ptr = 1",
                  "    , len = list.length",
                  "    , a=list[0], b=list[0]",
                  "  for(var i=1; i<len; ++i) {",
                  "    b = a",
                  "    a = list[i]",
                  "    if(compare(a, b)) {",
                  "      if(i === ptr) {",
                  "        ptr++",
                  "        continue",
                  "      }",
                  "      list[ptr++] = a",
                  "    }",
                  "  }",
                  "  list.length = ptr",
                  "  return list",
                  "}",
                  "",
                  "function unique_eq(list) {",
                  "  var ptr = 1",
                  "    , len = list.length",
                  "    , a=list[0], b = list[0]",
                  "  for(var i=1; i<len; ++i, b=a) {",
                  "    b = a",
                  "    a = list[i]",
                  "    if(a !== b) {",
                  "      if(i === ptr) {",
                  "        ptr++",
                  "        continue",
                  "      }",
                  "      list[ptr++] = a",
                  "    }",
                  "  }",
                  "  list.length = ptr",
                  "  return list",
                  "}",
                  "",
                  "function unique(list, compare, sorted) {",
                  "  if(list.length === 0) {",
                  "    return list",
                  "  }",
                  "  if(compare) {",
                  "    if(!sorted) {",
                  "      list.sort(compare)",
                  "    }",
                  "    return unique_pred(list, compare)",
                  "  }",
                  "  if(!sorted) {",
                  "    list.sort()",
                  "  }",
                  "  return unique_eq(list)",
                  "}",
                  "",
                  "module.exports = unique",
                  "",
                  "},{}],2:[function(require,module,exports){",
                  "const res = pm.response.json()",
                  "const uniq = require('uniq')",
                  "",
                  "console.log(uniq([1, 1, 2, 1, 3]))",
                  "",
                  "pm.test('Status code is 200', () => {",
                  "  pm.response.to.have.status(200)",
                  "})",
                  "",
                  "pm.test('API response is successful', () => {",
                  "  pm.expect(res.status).to.eql('success')",
                  "})",
                  "",
                  "pm.test('Created user has correct type of user ID', () => {",
                  "  pm.expect(res.id).to.be.a('string')",
                  "})",
                  "",
                  "pm.test('Does not expose user password', () => {",
                  "  pm.expect(res).to.not.have.property('password')",
                  "})",
                  "",
                  "pm.test('Created user has all relevant fields', () => {",
                  "  pm.expect(res).to.have.all.keys('status', 'id', 'firstName', 'lastName')",
                  "})",
                  "",
                  "pm.test('Created user matches submitted user', () => {",
                  "  const requestedUser = _.omit(rawToObject(pm.request.body.urlencoded.toString()), 'password')",
                  "  const response = _.omit(res, ['id', 'status'])",
                  "  pm.expect(requestedUser).to.eql(response)",
                  "})",
                  "",
                  "pm.sendRequest({",
                  "  url: `${pm.environment.get('url')}/delete?id=${res.id}`,",
                  "  method: 'delete'",
                  "})",
                  "",
                  "function rawToObject (str) {",
                  "  return str.split('&').reduce((prev, curr, i, arr) => {",
                  "    var p = curr.split('=')",
                  "    prev[decodeURIComponent(p[0])] = decodeURIComponent(p[1])",
                  "    return prev",
                  "  }, {})",
                  "}",
                  "",
                  "},{\"uniq\":1}]},{},[2]);",
                  ""
                ],
                "type": "text/javascript"
              }
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "a9acac69-7152-40c3-939b-51f2c3d9085f",
                "exec": "",
                "type": "text/javascript"
              }
            }
          ],
          "_postman_id": "29b59dea-38b2-4ffd-ba8d-99e74dcdee95",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "POST",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "firstName",
                  "value": "{{firstName}}",
                  "description": "The user's first name (required)",
                  "type": "text"
                },
                {
                  "key": "lastName",
                  "value": "{{lastName}}",
                  "description": "The user's last name (required)",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "{{password}}",
                  "description": "The user's password (required)",
                  "type": "text"
                }
              ]
            },
            "url": {
              "raw": "{{url}}/create",
              "host": [
                "{{url}}"
              ],
              "path": [
                "create"
              ]
            },
            "description": "Creates a new user in the system. The user will be assigned an ID automatically. This can be found in the response."
          },
          "response": [
            {
              "id": "98b106d7-bc65-4501-bdb5-0a21b9dc4abe",
              "name": "New user",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/x-www-form-urlencoded",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "firstName",
                      "value": "{{firstName}}",
                      "description": "The user's first name (required)",
                      "type": "text"
                    },
                    {
                      "key": "lastName",
                      "value": "{{lastName}}",
                      "description": "The user's last name (required)",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "{{password}}",
                      "description": "The user's password (required)",
                      "type": "text"
                    }
                  ]
                },
                "url": {
                  "raw": "{{url}}/create",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "create"
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "X-Powered-By",
                  "value": "Express"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "101"
                },
                {
                  "key": "ETag",
                  "value": "W/\"65-KsPJ95rCxmmvvRBY2Sqroxk2vmA\""
                },
                {
                  "key": "Date",
                  "value": "Thu, 10 Jan 2019 23:58:59 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"status\": \"success\",\n    \"firstName\": \"Ben\",\n    \"lastName\": \"Smith\",\n    \"id\": \"0729d37c-ef9f-4ffa-8f71-a6eedf1f95b7\"\n}"
            },
            {
              "id": "d5381fc8-0832-49e3-8d79-8f79a52c94ac",
              "name": "New user (failure)",
              "originalRequest": {
                "method": "POST",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/x-www-form-urlencoded",
                    "type": "text"
                  },
                  {
                    "key": "fhgu",
                    "value": "hff",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "file",
                  "file": {}
                },
                "url": {
                  "raw": "{{url}}/create",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "create"
                  ]
                }
              },
              "status": "Bad Request",
              "code": 400,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "Access-Control-Allow-Credentials",
                  "value": ""
                },
                {
                  "key": "Access-Control-Allow-Headers",
                  "value": ""
                },
                {
                  "key": "Access-Control-Allow-Methods",
                  "value": ""
                },
                {
                  "key": "Access-Control-Allow-Origin",
                  "value": "*"
                },
                {
                  "key": "Access-Control-Expose-Headers",
                  "value": ""
                },
                {
                  "key": "Content-Encoding",
                  "value": "gzip"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Date",
                  "value": "Mon, 10 Jun 2019 17:15:08 GMT"
                },
                {
                  "key": "ETag",
                  "value": "W/\"65-KsPJ95rCxmmvvRBY2Sqroxk2vmA\""
                },
                {
                  "key": "Server",
                  "value": "nginx"
                },
                {
                  "key": "Vary",
                  "value": "Accept-Encoding"
                },
                {
                  "key": "X-Powered-By",
                  "value": "Express"
                },
                {
                  "key": "x-srv-span",
                  "value": "v=1;s=74ffbaf94164f2e0"
                },
                {
                  "key": "x-srv-trace",
                  "value": "v=1;t=7dd8ae46cd0d8f93"
                },
                {
                  "key": "Content-Length",
                  "value": "114"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"status\": \"fail\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "d099ee89-7bd1-4406-9089-57a4f1547a9d"
    },
    {
      "name": "Read",
      "item": [
        {
          "name": "Get all users",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "a7b13f9d-1571-4bcd-b29f-c9bc4d45748e",
                "exec": [
                  "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){",
                  "const res = pm.response.json()",
                  "const id = pm.globals.get('id')",
                  "",
                  "pm.test('Status code is 200', () => {",
                  "  pm.response.to.have.status(200)",
                  "})",
                  "",
                  "pm.test('One user exists', () => {",
                  "  pm.expect(res).to.have.length(2)",
                  "})",
                  "",
                  "pm.test('User has all relevant fields', () => {",
                  "  res.forEach((val, i) => {",
                  "    if (i > 0) {",
                  "      pm.expect(val).to.have.all.keys('id', 'firstName', 'lastName')",
                  "    }",
                  "  })",
                  "})",
                  "",
                  "pm.test('User passwords are not exposed', () => {",
                  "  res.forEach((val) => {",
                  "    pm.expect(val).to.not.have.property('password')",
                  "  })",
                  "})",
                  "",
                  "// cleanup",
                  "pm.globals.unset('id')",
                  "",
                  "pm.sendRequest({",
                  "  url: `${pm.environment.get('url')}/delete?id=${id}`,",
                  "  method: 'delete'",
                  "})",
                  "",
                  "},{}]},{},[1]);",
                  ""
                ],
                "type": "text/javascript"
              },
              "exec": [
                "const res = pm.response.json();",
                "const id = pm.globals.get('id');",
                "",
                "pm.test('Status code is 200', () => {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('One user exists', () => {",
                "   pm.expect(res).to.have.length(2);",
                "});",
                "",
                "pm.test('User has all relevant fields', () => {",
                "    res.forEach((val, i) => {",
                "        if (i > 0) {",
                "            pm.expect(val).to.have.all.keys('id', 'firstName', 'lastName');",
                "            ",
                "        }",
                "    });",
                "});",
                "",
                "pm.test('User passwords are not exposed', () => {",
                "    res.forEach((val) => {",
                "       pm.expect(val).to.not.have.property('password');",
                "    });",
                "});",
                "",
                "// cleanup",
                "pm.globals.unset('id');",
                "",
                "pm.sendRequest({",
                "    url: `${pm.environment.get('url')}/delete?id=${id}`,",
                "    method: 'delete'",
                "});"
              ]
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "da10cfde-f75c-42af-93b7-98187c1a00b5",
                "exec": [
                  "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){",
                  "const firstName = pm.variables.get('firstName')",
                  "const lastName = pm.variables.get('lastName')",
                  "const password = pm.variables.get('password')",
                  "",
                  "pm.sendRequest({",
                  "  url: `${pm.environment.get('url')}/create`,",
                  "  method: 'POST',",
                  "  header: 'Content-Type:application/x-www-form-urlencoded',",
                  "  body: {",
                  "    mode: 'raw',",
                  "    raw: `firstName=${firstName}&lastName=${lastName}&password=${password}`",
                  "  }",
                  "}, (err, res) => {",
                  "  res = res.json()",
                  "  pm.globals.set('id', res.id)",
                  "})",
                  "",
                  "},{}]},{},[1]);",
                  ""
                ],
                "type": "text/javascript"
              },
              "exec": [
                "const firstName = pm.variables.get('firstName');",
                "const lastName = pm.variables.get('lastName');",
                "const password = pm.variables.get('password');",
                "",
                "pm.sendRequest({",
                "    url: `${pm.environment.get('url')}/create`,",
                "    method: 'POST',",
                "    header: 'Content-Type:application/x-www-form-urlencoded',",
                "    body: {",
                "        mode: 'raw',",
                "        raw: `firstName=${firstName}&lastName=${lastName}&password=${password}`",
                "    }",
                "}, (err, res) => {",
                "    res = res.json();",
                "    pm.globals.set('id', res.id);",
                "});"
              ]
            }
          ],
          "_postman_id": "51cd9e27-38bf-479c-a46d-4267939ad081",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "auth": {
              "type": "noauth"
            },
            "method": "GET",
            "header": [
              {
                "key": "key",
                "value": "{{key}}",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{url}}/get?all=true",
              "host": [
                "{{url}}"
              ],
              "path": [
                "get"
              ],
              "query": [
                {
                  "key": "all",
                  "value": "true"
                }
              ]
            },
            "description": "Get all users in the system."
          },
          "response": [
            {
              "id": "bc83f93d-c74b-4ce5-8e9c-a561f7dab66e",
              "name": "Get all users",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/get?all=true",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "get"
                  ],
                  "query": [
                    {
                      "key": "all",
                      "value": "true"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "X-Powered-By",
                  "value": "Express"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "105"
                },
                {
                  "key": "ETag",
                  "value": "W/\"69-ti7ujd/Cyb8EeoWoqRXh482Zy5o\""
                },
                {
                  "key": "Date",
                  "value": "Fri, 11 Jan 2019 00:00:53 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n    {\n        \"status\": \"success\"\n    },\n    {\n        \"firstName\": \"Ben\",\n        \"lastName\": \"Smith\",\n        \"id\": \"0729d37c-ef9f-4ffa-8f71-a6eedf1f95b7\"\n    }\n]"
            }
          ]
        },
        {
          "name": "Get user by ID",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "39838cba-ed3a-4bb3-96c7-58dfa9422476",
                "exec": [
                  "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){",
                  "const res = pm.response.json()",
                  "const id = pm.globals.get('id')",
                  "",
                  "pm.test('Status code is 200', () => {",
                  "  pm.response.to.have.status(200)",
                  "})",
                  "",
                  "pm.test('User matches requested user', () => {",
                  "  const id = pm.request.url.query.get('id')",
                  "  pm.expect(res[1].id).to.eql(id)",
                  "})",
                  "",
                  "pm.test('User has correct type of user ID', () => {",
                  "  pm.expect(res[1].id).to.be.a('string')",
                  "})",
                  "",
                  "pm.test('Does not expose user password', () => {",
                  "  pm.expect(res[1]).to.not.have.property('password')",
                  "})",
                  "",
                  "pm.test('User has all relevant fields', () => {",
                  "  pm.expect(res[1]).to.have.all.keys('id', 'firstName', 'lastName')",
                  "})",
                  "",
                  "// cleanup",
                  "pm.globals.unset('id')",
                  "",
                  "pm.sendRequest({",
                  "  url: `${pm.environment.get('url')}/delete?id=${id}`,",
                  "  method: 'delete'",
                  "})",
                  "",
                  "},{}]},{},[1]);",
                  ""
                ],
                "type": "text/javascript"
              },
              "exec": [
                "const res = pm.response.json();",
                "const id = pm.globals.get('id');",
                "",
                "pm.test('Status code is 200', () => {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('User matches requested user', () => {",
                "    const id = pm.request.url.query.get('id');",
                "    pm.expect(res[1].id).to.eql(id);",
                "});",
                "",
                "pm.test('User has correct type of user ID', () => {",
                "    pm.expect(res[1].id).to.be.a('string');",
                "});",
                "",
                "pm.test('Does not expose user password', () => {",
                "    pm.expect(res[1]).to.not.have.property('password');",
                "});",
                "",
                "pm.test('User has all relevant fields', () => {",
                "    pm.expect(res[1]).to.have.all.keys('id', 'firstName', 'lastName');",
                "});",
                "",
                "// cleanup",
                "pm.globals.unset('id');",
                "",
                "pm.sendRequest({",
                "    url: `${pm.environment.get('url')}/delete?id=${id}`,",
                "    method: 'delete'",
                "});"
              ]
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "1230435c-fc1d-45ae-8b15-139145d17719",
                "exec": [
                  "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){",
                  "const firstName = pm.variables.get('firstName')",
                  "const lastName = pm.variables.get('lastName')",
                  "const password = pm.variables.get('password')",
                  "",
                  "pm.sendRequest({",
                  "  url: `${pm.environment.get('url')}/create`,",
                  "  method: 'POST',",
                  "  header: 'Content-Type:application/x-www-form-urlencoded',",
                  "  body: {",
                  "    mode: 'raw',",
                  "    raw: `firstName=${firstName}&lastName=${lastName}&password=${password}`",
                  "  }",
                  "}, (err, res) => {",
                  "  res = res.json()",
                  "  pm.globals.set('id', res.id)",
                  "})",
                  "",
                  "},{}]},{},[1]);",
                  ""
                ],
                "type": "text/javascript"
              },
              "exec": [
                "const firstName = pm.variables.get('firstName');",
                "const lastName = pm.variables.get('lastName');",
                "const password = pm.variables.get('password');",
                "",
                "pm.sendRequest({",
                "    url: `${pm.environment.get('url')}/create`,",
                "    method: 'POST',",
                "    header: 'Content-Type:application/x-www-form-urlencoded',",
                "    body: {",
                "        mode: 'raw',",
                "        raw: `firstName=${firstName}&lastName=${lastName}&password=${password}`",
                "    }",
                "}, (err, res) => {",
                "    res = res.json();",
                "    pm.globals.set('id', res.id);",
                "});"
              ]
            }
          ],
          "_postman_id": "9f369ee5-61ac-4382-9191-0a6c8aa6886c",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [
              {
                "key": "x-mock-response-name",
                "value": "Get user by ID",
                "type": "text"
              }
            ],
            "url": {
              "raw": "{{url}}/get/?id={{id}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "get",
                ""
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The user's ID (required)"
                }
              ]
            },
            "description": "Retrieves a user by `id`."
          },
          "response": [
            {
              "id": "4a2f790c-af19-41e0-974f-7e20e505f404",
              "name": "Get user by ID (no user found)",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/get/?id={{id}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "get",
                    ""
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{id}}",
                      "description": "The user's ID (required)"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "X-Powered-By",
                  "value": "Express"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "36"
                },
                {
                  "key": "ETag",
                  "value": "W/\"24-+nHORFhZtwqol4/kZqGURIjn3RE\""
                },
                {
                  "key": "Date",
                  "value": "Fri, 11 Jan 2019 00:39:07 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"status\": \"no user found\",\n    \"id\": \"0729d37c-ef9f-4ffa-8f71-a6eedf1f95b\"\n}"
            },
            {
              "id": "9c30488c-a18e-4236-af06-34b052f10f4b",
              "name": "Get user by ID",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/get/?id={{id}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "get",
                    ""
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{id}}",
                      "description": "The user's ID (required)"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "X-Powered-By",
                  "value": "Express"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "105"
                },
                {
                  "key": "ETag",
                  "value": "W/\"69-PWyeF3E5khoqlHSeQl62TwtxWks\""
                },
                {
                  "key": "Date",
                  "value": "Fri, 11 Jan 2019 00:03:13 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n    {\n        \"status\": \"success\"\n    },\n    {\n        \"firstName\": \"Ben\",\n        \"lastName\": \"Smith\",\n        \"id\": \"0729d37c-ef9f-4ffa-8f71-a6eedf1f95b7\"\n    }\n]"
            }
          ]
        },
        {
          "name": "Get users by first name",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "39838cba-ed3a-4bb3-96c7-58dfa9422476",
                "exec": [
                  "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){",
                  "const res = pm.response.json()",
                  "const id = pm.globals.get('id')",
                  "const firstName = pm.variables.get('firstName')",
                  "",
                  "pm.test('Status code is 200', () => {",
                  "  pm.response.to.have.status(200)",
                  "})",
                  "",
                  "pm.test('List of users is returned', () => {",
                  "  pm.expect(res).to.be.an('array')",
                  "})",
                  "",
                  "pm.test('All users have firstname: ' + firstName, () => {",
                  "  res.forEach((val, i) => {",
                  "    if (i > 0) {",
                  "      pm.expect(val.firstName).to.eql(firstName)",
                  "    }",
                  "  })",
                  "})",
                  "",
                  "pm.test('User passwords are not exposed', () => {",
                  "  res.forEach((val, i) => {",
                  "    if (i > 0) {",
                  "      pm.expect(val).to.not.have.all.keys('password')",
                  "    }",
                  "  })",
                  "})",
                  "",
                  "pm.test('User has all relevant fields and correct types', () => {",
                  "  res.forEach((val, i) => {",
                  "    if (i > 0) {",
                  "      pm.expect(val.id).to.be.a('string')",
                  "      pm.expect(val.firstName).to.be.a('string')",
                  "      pm.expect(val.lastName).to.be.a('string')",
                  "    }",
                  "  })",
                  "})",
                  "",
                  "// cleanup",
                  "pm.globals.unset('id')",
                  "",
                  "pm.sendRequest({",
                  "  url: `${pm.environment.get('url')}/delete?id=${id}`,",
                  "  method: 'delete'",
                  "})",
                  "",
                  "},{}]},{},[1]);",
                  ""
                ],
                "type": "text/javascript"
              },
              "exec": [
                "const res = pm.response.json();",
                "const id = pm.globals.get('id');",
                "const firstName = pm.variables.get('firstName');",
                "",
                "pm.test('Status code is 200', () => {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('List of users is returned', () => {",
                "    pm.expect(res).to.be.an('array');",
                "});",
                "",
                "pm.test('All users have firstname: ' + firstName, () => {",
                "    res.forEach((val, i) => {",
                "        if (i > 0) {",
                "            pm.expect(val.firstName).to.eql(firstName);   ",
                "        }",
                "    });",
                "});",
                "",
                "pm.test('User passwords are not exposed', () => {",
                "    res.forEach((val, i) => {",
                "        if (i > 0) {",
                "            pm.expect(val).to.not.have.all.keys('password');   ",
                "        }",
                "    });",
                "});",
                "",
                "pm.test('User has all relevant fields and correct types', () => {",
                "    res.forEach((val, i) => {",
                "        if (i > 0) {",
                "            pm.expect(val.id).to.be.a('string');",
                "            pm.expect(val.firstName).to.be.a('string');",
                "            pm.expect(val.lastName).to.be.a('string');",
                "        }",
                "    });",
                "});",
                "",
                "// cleanup",
                "pm.globals.unset('id');",
                "",
                "pm.sendRequest({",
                "    url: `${pm.environment.get('url')}/delete?id=${id}`,",
                "    method: 'delete'",
                "});"
              ]
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "367920ce-6402-4a38-84f0-79eadd8547df",
                "exec": [
                  "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){",
                  "const firstName = pm.variables.get('firstName')",
                  "const lastName = pm.variables.get('lastName')",
                  "const password = pm.variables.get('password')",
                  "",
                  "pm.sendRequest({",
                  "  url: `${pm.environment.get('url')}/create`,",
                  "  method: 'POST',",
                  "  header: 'Content-Type:application/x-www-form-urlencoded',",
                  "  body: {",
                  "    mode: 'raw',",
                  "    raw: `firstName=${firstName}&lastName=${lastName}&password=${password}`",
                  "  }",
                  "}, (err, res) => {",
                  "  res = res.json()",
                  "  pm.globals.set('id', res.id)",
                  "})",
                  "",
                  "},{}]},{},[1]);",
                  ""
                ],
                "type": "text/javascript"
              },
              "exec": [
                "const firstName = pm.variables.get('firstName');",
                "const lastName = pm.variables.get('lastName');",
                "const password = pm.variables.get('password');",
                "",
                "pm.sendRequest({",
                "    url: `${pm.environment.get('url')}/create`,",
                "    method: 'POST',",
                "    header: 'Content-Type:application/x-www-form-urlencoded',",
                "    body: {",
                "        mode: 'raw',",
                "        raw: `firstName=${firstName}&lastName=${lastName}&password=${password}`",
                "    }",
                "}, (err, res) => {",
                "    res = res.json();",
                "    pm.globals.set('id', res.id);",
                "});"
              ]
            }
          ],
          "_postman_id": "c68ac69e-73c4-407b-8dc3-5a4496581c90",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "GET",
            "header": [],
            "url": {
              "raw": "{{url}}/get/?firstName={{firstName}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "get",
                ""
              ],
              "query": [
                {
                  "key": "firstName",
                  "value": "{{firstName}}",
                  "description": "The user's first name (required)"
                }
              ]
            },
            "description": "Retrieves all users with the given `firstName`."
          },
          "response": [
            {
              "id": "3e98d001-4621-454b-a413-58ec2365c5fa",
              "name": "Get users by first name",
              "originalRequest": {
                "method": "GET",
                "header": [],
                "url": {
                  "raw": "{{url}}/get/?firstName={{firstName}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "get",
                    ""
                  ],
                  "query": [
                    {
                      "key": "firstName",
                      "value": "{{firstName}}",
                      "description": "The user's first name (required)"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "X-Powered-By",
                  "value": "Express"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "105"
                },
                {
                  "key": "ETag",
                  "value": "W/\"69-F/ktIhtM5We/sndYYNUK1vmdEnQ\""
                },
                {
                  "key": "Date",
                  "value": "Fri, 11 Jan 2019 00:05:34 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "[\n    {\n        \"status\": \"success\"\n    },\n    {\n        \"firstName\": \"Ben\",\n        \"lastName\": \"Smith\",\n        \"id\": \"0729d37c-ef9f-4ffa-8f71-a6eedf1f95b7\"\n    }\n]"
            }
          ]
        }
      ],
      "_postman_id": "7d1a39a6-a34b-47e0-bc06-7d14200d8eda",
      "event": [
        {
          "listen": "prerequest",
          "script": {
            "id": "c52906d3-de38-463b-b74e-41ea88fc3a90",
            "type": "text/javascript",
            "exec": [
              ""
            ]
          }
        },
        {
          "listen": "test",
          "script": {
            "id": "745b58f4-ee47-4b68-b0d7-12d0ef6a0c65",
            "type": "text/javascript",
            "exec": [
              "console.log('hi from folder')"
            ]
          }
        }
      ]
    },
    {
      "name": "Update",
      "item": [
        {
          "name": "Update user",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "771fcde9-e90d-44a2-bf1b-ce5f89f3d63c",
                "exec": [
                  "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){",
                  "const res = pm.response.json()",
                  "const id = pm.request.url.query.get('id')",
                  "const firstName = pm.request.body.urlencoded.get('firstName')",
                  "",
                  "pm.test('Status code is 200', () => {",
                  "  pm.response.to.have.status(200)",
                  "})",
                  "",
                  "if (res.status === 'success') {",
                  "  pm.test('User matches requested user', () => {",
                  "    pm.expect(res.id).to.eql(id)",
                  "  })",
                  "",
                  "  pm.test('User has correct type of user ID', () => {",
                  "    pm.expect(res.id).to.be.a('string')",
                  "  })",
                  "",
                  "  pm.test('User has all relevant fields', () => {",
                  "    pm.expect(res).to.have.all.keys('status', 'id', 'firstName', 'lastName')",
                  "  })",
                  "",
                  "  pm.test('Does not expose user password', () => {",
                  "    pm.expect(res).to.not.have.property('password')",
                  "  })",
                  "",
                  "  pm.test('First name is updated to: ' + firstName, () => {",
                  "    pm.expect(res.firstName).to.eql(firstName)",
                  "  })",
                  "} else if (res.status === 'no user found') {",
                  "  pm.test('Lookup was against correct user', () => {",
                  "    pm.expect(res.id).to.eql(id)",
                  "  })",
                  "} else {",
                  "  pm.test(res.status).to.eql('invalid request')",
                  "}",
                  "",
                  "// cleanup",
                  "pm.globals.unset('id')",
                  "",
                  "pm.sendRequest({",
                  "  url: `${pm.environment.get('url')}/delete?id=${id}`,",
                  "  method: 'delete'",
                  "})",
                  "",
                  "},{}]},{},[1]);",
                  ""
                ],
                "type": "text/javascript"
              },
              "exec": [
                "const res = pm.response.json();",
                "const id = pm.request.url.query.get('id');",
                "const firstName = pm.request.body.urlencoded.get('firstName');",
                "",
                "pm.test('Status code is 200', () => {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "if (res.status === 'success') {",
                "    pm.test('User matches requested user', () => {",
                "        pm.expect(res.id).to.eql(id);",
                "    });",
                "    ",
                "    pm.test('User has correct type of user ID', () => {",
                "        pm.expect(res.id).to.be.a('string');",
                "    });",
                "    ",
                "    pm.test('User has all relevant fields', () => {",
                "        pm.expect(res).to.have.all.keys('status', 'id', 'firstName', 'lastName');",
                "    });",
                "    ",
                "    pm.test('Does not expose user password', () => {",
                "        pm.expect(res).to.not.have.property('password');",
                "    });",
                "    ",
                "    pm.test('First name is updated to: ' + firstName, () => {",
                "        pm.expect(res.firstName).to.eql(firstName);",
                "    });",
                "}",
                "",
                "else if (res.status === 'no user found') {",
                "    pm.test('Lookup was against correct user', () => {",
                "        pm.expect(res.id).to.eql(id);",
                "    });",
                "}",
                "",
                "else {",
                "    pm.test(res.status).to.eql('invalid request');",
                "}",
                "",
                "// cleanup",
                "pm.globals.unset('id');",
                "",
                "pm.sendRequest({",
                "    url: `${pm.environment.get('url')}/delete?id=${id}`,",
                "    method: 'delete'",
                "});"
              ]
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "788dd0b5-e126-4da9-b3d5-d3d7b104c85e",
                "exec": [
                  "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){",
                  "const firstName = pm.variables.get('firstName')",
                  "const lastName = pm.variables.get('lastName')",
                  "const password = pm.variables.get('password')",
                  "",
                  "pm.sendRequest({",
                  "  url: `${pm.environment.get('url')}/create`,",
                  "  method: 'POST',",
                  "  header: 'Content-Type:application/x-www-form-urlencoded',",
                  "  body: {",
                  "    mode: 'raw',",
                  "    raw: `firstName=${firstName}&lastName=${lastName}&password=${password}`",
                  "  }",
                  "}, (err, res) => {",
                  "  res = res.json()",
                  "  pm.globals.set('id', res.id)",
                  "})",
                  "",
                  "},{}]},{},[1]);",
                  ""
                ],
                "type": "text/javascript"
              },
              "exec": [
                "const firstName = pm.variables.get('firstName');",
                "const lastName = pm.variables.get('lastName');",
                "const password = pm.variables.get('password');",
                "",
                "pm.sendRequest({",
                "    url: `${pm.environment.get('url')}/create`,",
                "    method: 'POST',",
                "    header: 'Content-Type:application/x-www-form-urlencoded',",
                "    body: {",
                "        mode: 'raw',",
                "        raw: `firstName=${firstName}&lastName=${lastName}&password=${password}`",
                "    }",
                "}, (err, res) => {",
                "    res = res.json();",
                "    pm.globals.set('id', res.id);",
                "});"
              ]
            }
          ],
          "_postman_id": "2d4518dd-84bb-40a0-bcd9-d458f917749d",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "PUT",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "application/x-www-form-urlencoded",
                "type": "text"
              }
            ],
            "body": {
              "mode": "urlencoded",
              "urlencoded": [
                {
                  "key": "firstName",
                  "value": "Benjamin",
                  "description": "The user's new first name",
                  "type": "text"
                },
                {
                  "key": "password",
                  "value": "foobar",
                  "description": "The user's new password",
                  "type": "text",
                  "disabled": true
                }
              ]
            },
            "url": {
              "raw": "{{url}}/update?id={{id}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "update"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The user's ID (required)"
                }
              ]
            },
            "description": "Send the keys that you'd like to update, this can be one or more of `firstName`, `lastName` and `password`."
          },
          "response": [
            {
              "id": "4c2403cf-4668-455c-a251-008dbdd017ed",
              "name": "Update user",
              "originalRequest": {
                "method": "PUT",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/x-www-form-urlencoded",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "urlencoded",
                  "urlencoded": [
                    {
                      "key": "firstName",
                      "value": "Benjamin",
                      "description": "The user's new first name",
                      "type": "text"
                    },
                    {
                      "key": "password",
                      "value": "foobar",
                      "description": "The user's new password",
                      "type": "text",
                      "disabled": true
                    }
                  ]
                },
                "url": {
                  "raw": "{{url}}/update?id={{id}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "update"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{id}}",
                      "description": "The user's ID (required)"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "X-Powered-By",
                  "value": "Express"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "106"
                },
                {
                  "key": "ETag",
                  "value": "W/\"6a-SA9mzR+M2pmN7WPGgLm1ZqtRYis\""
                },
                {
                  "key": "Date",
                  "value": "Fri, 11 Jan 2019 00:18:07 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"status\": \"success\",\n    \"firstName\": \"Benjamin\",\n    \"lastName\": \"Smith\",\n    \"id\": \"0729d37c-ef9f-4ffa-8f71-a6eedf1f95b7\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "c4a78bf0-9606-406e-8ddc-bc75c6782fb7"
    },
    {
      "name": "Delete",
      "item": [
        {
          "name": "Delete user",
          "event": [
            {
              "listen": "test",
              "script": {
                "id": "768f1a29-b1cc-4829-9f20-e207c7ac8a2c",
                "exec": [
                  "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){",
                  "const response = pm.response",
                  "const id = pm.globals.get('id')",
                  "",
                  "pm.test('Status code is 200', () => {",
                  "  pm.response.to.have.status(200)",
                  "})",
                  "",
                  "pm.test('Operation is successful', () => {",
                  "  const res = response.json()",
                  "  pm.expect(res.status).to.eql('success')",
                  "})",
                  "",
                  "pm.test('User matches requested user', () => {",
                  "  const res = response.json()",
                  "  pm.globals.set('apiKey', res.id)",
                  "  pm.expect(res.id).to.eql(id)",
                  "})",
                  "",
                  "pm.test('User can no longer be found', () => {",
                  "  pm.sendRequest({",
                  "    url: `${pm.environment.get('url')}/get?id=${id}`,",
                  "    header: 'x-mock-response-name:Get user by ID (no user found)',",
                  "    method: 'get'",
                  "  }, (err, res) => {",
                  "    res = res.json()",
                  "    pm.expect(res.status).to.eql('no user found')",
                  "  })",
                  "})",
                  "",
                  "// cleanup",
                  "pm.globals.unset('id')",
                  "",
                  "},{}]},{},[1]);",
                  ""
                ],
                "type": "text/javascript"
              },
              "exec": [
                "const response = pm.response;",
                "const id = pm.globals.get('id');",
                "",
                "pm.test('Status code is 200', () => {",
                "    pm.response.to.have.status(200);",
                "});",
                "",
                "pm.test('Operation is successful', () => {",
                "    const res = response.json();",
                "    pm.expect(res.status).to.eql('success');",
                "});",
                "",
                "pm.test('User matches requested user', () => {",
                "    const res = response.json();",
                "    pm.globals.set(\"apiKey\", res.id);",
                "    pm.expect(res.id).to.eql(id);",
                "});",
                "",
                "pm.test('User can no longer be found', () => {",
                "    pm.sendRequest({",
                "        url: `${pm.environment.get('url')}/get?id=${id}`,",
                "        header: 'x-mock-response-name:Get user by ID (no user found)',",
                "        method: 'get'",
                "    }, (err, res) => {",
                "        res = res.json();",
                "        pm.expect(res.status).to.eql('no user found');",
                "    });",
                "});",
                "",
                "// cleanup",
                "pm.globals.unset('id');"
              ]
            },
            {
              "listen": "prerequest",
              "script": {
                "id": "c29b0503-88e5-4bfd-8ccb-ed76593a7af1",
                "exec": [
                  "(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){",
                  "const firstName = pm.variables.get('firstName')",
                  "const lastName = pm.variables.get('lastName')",
                  "const password = pm.variables.get('password')",
                  "",
                  "pm.sendRequest({",
                  "  url: `${pm.environment.get('url')}/create`,",
                  "  method: 'POST',",
                  "  header: 'Content-Type:application/x-www-form-urlencoded',",
                  "  body: {",
                  "    mode: 'raw',",
                  "    raw: `firstName=${firstName}&lastName=${lastName}&password=${password}`",
                  "  }",
                  "}, (err, res) => {",
                  "  res = res.json()",
                  "  pm.globals.set('id', res.id)",
                  "})",
                  "",
                  "},{}]},{},[1]);",
                  ""
                ],
                "type": "text/javascript"
              },
              "exec": [
                "const firstName = pm.variables.get('firstName');",
                "const lastName = pm.variables.get('lastName');",
                "const password = pm.variables.get('password');",
                "",
                "pm.sendRequest({",
                "    url: `${pm.environment.get('url')}/create`,",
                "    method: 'POST',",
                "    header: 'Content-Type:application/x-www-form-urlencoded',",
                "    body: {",
                "        mode: 'raw',",
                "        raw: `firstName=${firstName}&lastName=${lastName}&password=${password}`",
                "    }",
                "}, (err, res) => {",
                "    res = res.json();",
                "    pm.globals.set('id', res.id);",
                "});"
              ]
            }
          ],
          "_postman_id": "d712b24e-3831-4328-b6f8-d5d0cedfd26e",
          "protocolProfileBehavior": {
            "disableBodyPruning": true
          },
          "request": {
            "method": "DELETE",
            "header": [
              {
                "key": "Content-Type",
                "name": "Content-Type",
                "value": "text/plain",
                "type": "text"
              }
            ],
            "body": {
              "mode": "raw",
              "raw": ""
            },
            "url": {
              "raw": "{{url}}/delete?id={{id}}",
              "host": [
                "{{url}}"
              ],
              "path": [
                "delete"
              ],
              "query": [
                {
                  "key": "id",
                  "value": "{{id}}",
                  "description": "The user's ID"
                }
              ]
            },
            "description": "Deletes a user from the system by `id`."
          },
          "response": [
            {
              "id": "491f7da9-f0ea-4395-8d0e-56ba4204df25",
              "name": "Delete user",
              "originalRequest": {
                "method": "DELETE",
                "header": [
                  {
                    "key": "Content-Type",
                    "name": "Content-Type",
                    "value": "application/x-www-form-urlencoded",
                    "type": "text"
                  }
                ],
                "body": {
                  "mode": "raw",
                  "raw": ""
                },
                "url": {
                  "raw": "{{url}}/delete?id={{id}}",
                  "host": [
                    "{{url}}"
                  ],
                  "path": [
                    "delete"
                  ],
                  "query": [
                    {
                      "key": "id",
                      "value": "{{id}}",
                      "description": "The user's ID"
                    }
                  ]
                }
              },
              "status": "OK",
              "code": 200,
              "_postman_previewlanguage": "json",
              "header": [
                {
                  "key": "X-Powered-By",
                  "value": "Express"
                },
                {
                  "key": "Content-Type",
                  "value": "application/json; charset=utf-8"
                },
                {
                  "key": "Content-Length",
                  "value": "64"
                },
                {
                  "key": "ETag",
                  "value": "W/\"40-bT/ASzl0KO3wj/eo2xEBaHPLnvk\""
                },
                {
                  "key": "Date",
                  "value": "Fri, 11 Jan 2019 00:20:55 GMT"
                },
                {
                  "key": "Connection",
                  "value": "keep-alive"
                }
              ],
              "cookie": [],
              "responseTime": null,
              "body": "{\n    \"status\": \"success\",\n    \"id\": \"0729d37c-ef9f-4ffa-8f71-a6eedf1f95b7\"\n}"
            }
          ]
        }
      ],
      "_postman_id": "f613e990-96ab-4f1f-acca-1c5183aa525c"
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "id": "d99303cf-b44f-4ae7-9895-09d7e5a83ec7",
        "type": "text/javascript",
        "exec": [
          ""
        ]
      }
    },
    {
      "listen": "test",
      "script": {
        "id": "23eb61c7-5533-4cab-997b-9d0b82f4975d",
        "type": "text/javascript",
        "exec": [
          "console.log('hi from collection level')"
        ]
      }
    }
  ],
  "variable": [
    {
      "id": "129bbf4e-df80-4487-b8e0-ae41a7d804d1",
      "key": "firstName",
      "value": "Ben",
      "type": "string"
    },
    {
      "id": "8f7495c4-92fd-41ab-9dd8-a4cf4c8881f3",
      "key": "lastName",
      "value": "Smith",
      "type": "string"
    },
    {
      "id": "5a7268df-2171-4035-90c2-8a92a3ffecc3",
      "key": "password",
      "value": "pw",
      "type": "string"
    }
  ]
}